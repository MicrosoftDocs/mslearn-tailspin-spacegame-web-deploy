trigger:
- '*'

pool:
  name: 'Default'    
  demands:
    - npm
    - agent.name -equals AMANCINI

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '8.x'

steps:
# Step 1: Use the required .NET SDK
- task: UseDotNet@2
  displayName: 'Use .NET SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'

# Step 2: Use a compatible Node.js version
- task: UseNode@1
  displayName: 'Use Node.js 18.x'
  inputs:
    version: '18.x'

# Step 3: Set environment variables for node-gyp
- powershell: |
    $env:GYP_MSVS_VERSION = '2019' # Required for node-gyp to locate Visual Studio Build Tools
  displayName: 'Set Environment Variables for Node.js and npm'

# Step 4: Install npm dependencies with improved settings
- script: |
    npm install --verbose --no-optional
  displayName: 'Run npm install'

# Step 5: Compile Sass assets
- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

# Step 6: Run Gulp tasks
- task: gulp@1
  displayName: 'Run gulp tasks'

# Step 7: Write build information to a file
- script: |
    echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

# Step 8: Restore project dependencies
- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# Step 9: Build the project
- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore
    --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

# Step 10: Publish the project
- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

# Step 11: Publish build artifacts
- publish: '$(Build.ArtifactStagingDirectory)'
  artifact: drop